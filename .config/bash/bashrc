### DO NOTHING IF NOT INTERACTIVE
[[ $- != *i* ]] && return


### CONFIGURE ENV
# unified fish/bash env variable import
ENV_CFG="$HOME/.config/bash/env.cfg"
if test -f "$ENV_CFG"; then
  while read line; do
    read scope variable value <<< $line
    if test -x "$(command -v $scope)"; then
      expanded="$(eval "echo $value")"
      export $variable="$expanded"
    fi
  done < <(egrep -v '^#|^\s*$' "$ENV_CFG")
fi


### CONFIGURE BASH
stty -ixon  # disable ctrl-s / ctrl-q
shopt -s checkwinsize  # auto-adjust term size
shopt -s histappend  # append to the history file
shopt -s cmdhist  # save multi-line as single line
shopt -s cdspell  # auto-correct minor dirname errors
export HISTSIZE=''  # number of commands stored (cached) in memory
export HISTFILESIZE=''  # number of commands stored in .bash_history (empty=unlimited)
export HISTCONTROL=ignoreboth  # (ignorespace) lines starting with a white space + (ignoredups) duplicated + (erasedups)
export HISTIGNORE='[ \t]*:exit:pwd'  # exclude commands from history


### CONFIGURE CLI
# fzf configuration
[[ -f "$HOME/.config/bash/fzf.sh" ]] && source "$HOME/.config/bash/fzf.sh"
# z.lua configuration
[[ -d "$HOME/.local/opt/z.lua" ]] && eval "$(lua "$HOME/.local/opt/z.lua/z.lua" --init bash enhanced once)"
# prompt
if [[ -x "$(command -v starship)" ]]; then
  eval "$(starship init bash)"
else
  [[ -f "$HOME/.config/bash/prompt.sh" ]] && source "$HOME/.config/bash/prompt.sh"
fi


### ADD COMPLETIONS
if ! shopt -oq posix; then
  if  [[ -z "$BASH_COMPLETION_VERSINFO" ]]; then
    if [ -r /usr/share/bash-completion/bash_completion ]; then
      . /usr/share/bash-completion/bash_completion
    elif [ -r /etc/bash_completion ]; then
      . /etc/bash_completion
    fi
  fi
fi


### ADD FUNCTIONS
# find dotfile dir and file in it
edot() {
  $EDITOR "$(\
    fd \
    --type file \
    --unrestricted \
    --ignore-case \
    --full-path \
    --absolute-path \
    "$@" "$DOTFILES_HOME" \
    | fzf \
    --select-1 \
    --exit-0 \
    --filter "$@" \
    | head -n 1 \
    )"
  }

# render help wtih bat
if test -x "$(command -v bat)"; then
  help() { "$@" --help 2>&1 | bat --plain --language=help; }
fi

# copy current prompt to clipboard
if test -x "$(command -v wl-copy)"; then
  copyline() { printf %s "$READLINE_LINE" | wl-copy; }
elif test -x "$(command -v xsel)"; then
  copyline() { printf %s "$READLINE_LINE" | xsel -ib; }
fi
[[ $(type -t copyline) == function ]] && bind -x '"\C-xc":copyline'

# open foot in the same directory
# https://codeberg.org/dnkl/foot/wiki#user-content-bash
if [[ $TERM =~ ^foot ]]; then
  osc7_cwd() {
    local strlen=${#PWD}
    local encoded=""
    local pos c o
    for (( pos=0; pos<strlen; pos++ )); do
      c=${PWD:$pos:1}
      case "$c" in
        [-/:_.!\'\(\)~[:alnum:]] ) o="${c}" ;;
        * ) printf -v o '%%%02X' "'${c}" ;;
      esac
      encoded+="${o}"
    done
    printf '\e]7;file://%s%s\e\\' "${HOSTNAME}" "${encoded}"
  }
  PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }osc7_cwd
fi

# cd on quit
if test -x "$(command -v nnn)"; then
  # https://github.com/jarun/nnn/tree/master/misc/quitcd
  n () {
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
      echo "nnn is already running"
      return
    fi

    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    LC_COLLATE='C' \nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
      . "$NNN_TMPFILE"
      rm -f "$NNN_TMPFILE" > /dev/null
    fi
  }
fi


### ADD ALIASES
ALIAS_CFG="$HOME/.config/bash/alias.cfg"
if test -f "$ALIAS_CFG"; then
  while read line
  do
    read scope variable value <<< $line
    if test -x "$(command -v $scope)"; then
      expanded="$(eval "echo $value")"
      alias $variable="$expanded"
    fi
  done < <(egrep -v '^#|^\s*$' "$ALIAS_CFG")
fi
