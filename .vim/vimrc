scriptencoding utf-8
" EDITOR {{{1
set nocompatible  " arrows + etc @ vi cmd
set mouse=iva  " enable mouse
set noruler  " hide line/column number
" set number relativenumber  " add line numbers
set splitbelow splitright  " change default positioning
set showtabline=2  " show tab bar
set laststatus=2  " show statusline
set noshowmode  " already displayed in statusline
set showcmd  " show pending keys
set cursorline  " highlight active line
set hlsearch incsearch  " highlight search matches on typing
set ignorecase smartcase  " case-insensitive search for lowercase
set path+=**  " tab completion for file-related tasks
set wildmenu  " display all matching files when we tab-complete
set wildmode=list:longest,full
set wildignore=*.pyc,*.swp,*.bak,tags,*.o,*.obj,*.class
set complete-=i  " don't scan included files (C), use .tags
set scrolloff=9  " keep lines under cursor on scroll
set textwidth=0  " don't force line wrapping
set history=1000  " more history
set autoread  " reload unchanged files automatically
set nofsync  " no disk flush force
set undofile  " persistent undo
set undodir=~/.vim/undo/
set viminfo+=n~/.vim/viminfo
set noswapfile
set nobackup
set backspace=indent,eol,start  " ctrl-w,ctrl-u in insert mode
set matchpairs+=<:>   " % to jump between pairs
set nostartofline  " don't move cursor to line start
set nolangremap   " for hotkeys
set nomodeline   " security
set shortmess+=sAI  " hide search hit & swapfile warnings, intro message
set shortmess-=S  " enable search result count
set switchbuf=usetab  " if opening buffer, search first in opened windows
set background=dark
if &term ==? 'alacritty' || &term ==? 'foot'
    let &term = 'xterm-256color'
endif
if &t_Co >= 256
    set termguicolors
endif
let g:vim_theme='everforest'

" SYNTAX {{{1
syntax enable  " hightlight syntax
filetype plugin indent on  " filetype-based rules
set nofoldenable  " disable folding
set redrawtime=1000  " more time for loading syntax on large file
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
set autoindent  " continue on new line
set breakindent  " continue on wrapped line
set listchars=tab:▶▶,trail:■,nbsp:■ " show invisible chars
set nolist  " hide invisible chars by default
augroup MySyntax
    autocmd BufWinEnter,BufNewFile * set formatoptions-=cro  " no comment continuation
    autocmd FileType vim,conf set foldmethod=marker
    autocmd FileType markdown set foldmethod=expr
    autocmd FileType json,yaml set foldmethod=syntax
    autocmd FileType json,csv,txt,xml set redrawtime=10000
augroup END
let g:is_bash = 1  " force bash syntax for .sh
let g:markdown_folding = 1  " enable markdown folding

" PLUGINS {{{1
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup AutoInstallVimPlug
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    augroup END
endif

call plug#begin('~/.vim/plugged')
" style {{{2
if g:vim_theme ==? 'gruvbox'
    Plug 'https://github.com/gruvbox-community/gruvbox'
        let g:gruvbox_contrast_dark='soft'
        let g:gruvbox_italic = 1
elseif g:vim_theme ==? 'everforest'
    Plug 'https://github.com/sainnhe/everforest'
        let g:everforest_enable_italic = 1
        let g:everforest_better_performance = 1
endif
Plug 'https://github.com/RRethy/vim-hexokinase', { 'do': 'make hexokinase' }  " highlight HEX/RGBA colors (F3)
" editor {{{2
Plug 'https://github.com/farmergreg/vim-lastplace'  " open at last edit
Plug 'https://github.com/ervandew/supertab'  " <TAB> for autocomplete
Plug 'https://github.com/tpope/vim-rsi'  " readline-like shortcuts
Plug 'https://github.com/tpope/vim-repeat'  " patch for vim-surround
Plug 'https://github.com/tpope/vim-surround'  " brackets, tags object (s)
Plug 'https://github.com/tpope/vim-commentary'  " comment object (gc)
Plug 'https://github.com/tpope/vim-endwise'  " autoclose if, for, ...
Plug 'https://github.com/christoomey/vim-system-copy'  " copy to system clipboard
Plug 'https://github.com/junegunn/vim-easy-align'  " align (gaip, vipga)
Plug 'https://github.com/FooSoft/vim-argwrap'  " wrap lines  (<L>w)
Plug 'https://github.com/junegunn/fzf'
Plug 'https://github.com/junegunn/fzf.vim'  " fuzzy search (<L>fd, <L>ff, <L>fif)
Plug 'https://github.com/vimwiki/vimwiki', { 'for': 'markdown' }  " help files
Plug 'https://github.com/jeetsukumaran/vim-indentwise'  " indent moves ([-, [+, [=)
" devops {{{2
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/sheerun/vim-polyglot'  " syntax
    let g:polyglot_disabled = ['sensible']
    let g:polyglot_disabled = ['vimwiki']
Plug 'https://github.com/sirver/ultisnips'  " snippet engine
Plug 'https://github.com/honza/vim-snippets'  " snippets
Plug 'https://github.com/dense-analysis/ale', { 'on': 'ALEEnable' }  " lint (F7, def, doc, err)
Plug 'https://github.com/preservim/tagbar', { 'on': 'TagbarToggle' }  " navigation (F5)
Plug 'https://github.com/mhinz/vim-signify', { 'on': 'SignifyToggle' }  " git (F6, <L>gd, <L>gp <L>gu)
Plug 'https://github.com/vim-test/vim-test'  " tests (<L>tn, L<tf>, L<ta>, L<tl>, L<tv>)
" Plug 'https://github.com/dstein64/vim-startuptime'  " debug vim
call plug#end()

" KEYS {{{1
map <Space> <Leader>
map q <Nop>
map s <Nop>
map Q <Nop>
" save changes {{{2
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>
" quit vim {{{2
nnoremap <silent> ZQ :q!<CR>
" quickfix navigation {{{2
nnoremap <silent> qn :cnext<CR>
nnoremap <silent> qp :cprevious<CR>
nnoremap <silent> qo :copen<CR>
nnoremap <silent> qc :cclose<CR>
" buffer navigation {{{2
nnoremap <Leader>b :bn<CR>
nnoremap <Leader>B :bp<CR>
" vertical navigationn
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
" window navigation {{{2
nnoremap <s-LEFT> :vertical resize +1 <Cr>
nnoremap <s-RIGHT> :vertical resize -1 <Cr>
nnoremap <s-UP> :resize +1 <Cr>
nnoremap <s-DOWN> :resize -1 <Cr>
" missing readline shortcuts {{{2
cnoremap <c-k> <c-\>egetcmdline()[:getcmdpos()-2]<CR>
" copypaths {{{2
nnoremap <Leader>cp :let @+ = expand("%:p")<CR>
nnoremap <Leader>cn :let @+ = expand("%:t")<CR>
" prefill substitute command {{{2
nnoremap S :%s///ge<Left><Left><Left><Left><C-r>=expand("<cword>")<CR><Right>
" indent-aware paste {{{3
nnoremap <leader>p p`[v`]=
nnoremap <leader>P P`[v`]=
" search / color / hidden symbols / code highlight / tags / git / lint {{{2
nnoremap <silent> <F1> :let @/=""<CR>
nnoremap <silent> <F2> :set list! list?<CR>
nnoremap <F3> :HexokinaseToggle<CR>
nnoremap <F5> :TagbarToggle<CR>
nnoremap <F6> :SignifyToggle<CR>
nnoremap <F7> :ALEEnable<CR>
" mark word instead of jump
nnoremap <silent> * :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hlsearch<CR>
nnoremap <silent> # :let @/='<C-R>=expand("<cword>")<CR>'<CR>:set hlsearch<CR>
" abbreviations (<leader> to activate) {{{2
cnoreabbrev <expr> th 'tab help'
iab ldash —
iab xdate <C-r>=strftime("%d/%m/%y %H:%M:%S")<CR>


" FUNCTIONS {{{1
" remove trailing spaces {{{2
def s:RemoveTrailingSpaces()
    var lsave = winsaveview()
    keeppatterns :%s/\s\+$//e
    call winrestview(lsave)
enddef

" create directories when saving file {{{2
def s:MkNonExDir(filename: string, buf: number)
    if empty(getbufvar(buf, '&buftype')) && filename !~# '\v^\w+\:\/'
        var dirname = fnamemodify(filename, ':h')
        if !isdirectory(dirname)
            call mkdir(dirname, 'p')
        endif
    endif
enddef

augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" edit dotfile {{{2
def s:EditDotfile(name: string)
    var query = shellescape(name)
    var dotpath = system(
        'fd'
        .. ' --type file'
        .. ' --unrestricted'
        .. ' --ignore-case'
        .. ' --full-path'
        .. ' --absolute-path'
        .. ' ' .. query
        .. ' "$DOTFILES_PATH"'
        .. ' | '
        .. 'fzf'
        .. ' --select-1'
        .. ' --exit-0'
        .. ' --filter ' .. query
        .. ' | '
        .. 'head -n 1'
        )
    execute 'tabnew ' .. dotpath
enddef

" redirect command output to a new tab {{{2
" https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
def Redir(cmd: string)
    var output = execute(cmd)
    for winnr in range(1, winnr('$'))
        if !empty(getwinvar(winnr, 'scratch', ''))
            execute ':' .. winnr .. 'windo close'
        endif
    endfor
    tabnew
    w:scratch = 1
    setlocal nobuflisted buftype=nofile bufhidden=wipe noswapfile
    call setline(1, split(output, "\n"))
enddef


" COMMANDS {{{1
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
command! -nargs=1 Edot call s:EditDotfile(<f-args>)
command! Rvim execute ':source $MYVIMRC'
command! RmTrailingSpaces call s:RemoveTrailingSpaces()
command! RmEmptyLines execute 'g/^\s*$/d'
" command MakeTags !ctags -R .  " create tags
command! -nargs=1 Redir silent call Redir(<f-args>)


" PLUGIN SETTINGS & EXTRAS {{{1
let g:vim_home = get(g:, 'vim_home', expand('~/.vim/'))
let config_list = [
    \ 'user/themes/'.g:vim_theme.'.vim',
    \ 'user/plugin-settings/*.vim'
    \]
for files in config_list
    for f in glob(g:vim_home.files, 1, 1)
        exec 'source' f
    endfor
endfor
